<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.ncu.newmedia.backschool.dao.StudentDao">

    <resultMap id="studentMap" type="Student">
        <id property="id" column="student_id" />
        <result property="name" column="name" />
        <result property="gender" column="gender" typeHandler="cn.ncu.newmedia.backschool.typeHandler.EnumTypeHandler"/>
        <result property="studentCard" column="student_card"/>
        <result property="college" column="college" />
        <result property="classname" column="class" />
        <result property="idCard" column="idCard" />
        <result property="qq" column="qq"  />
        <result property="bankCard" column="bank_card" />
        <result property="phone" column="phone" />
        <result property="email" column="email" />
        <result property="origin" column="origin" />
        <result property="highSchool" column="high_school" />
        <result property="user" column="user_id" />
    </resultMap>

    <insert id="insert" useGeneratedKeys="true" keyProperty="student.id">
        insert into student values (#{student.id},#{student.name},#{student.gender.code},
                                   #{student.studentCard},#{student.college},#{student.classname},
                                   #{student.idCard},#{student.qq},#{student.bankCard},
                                   #{student.phone},#{student.email},#{student.origin},
                                   #{student.highSchool},#{student.user})
    </insert>

    <update id="update">
        update student set name = #{student.name},gender = #{student.gender.code},
                                 student_card = #{student.studentCard},college = #{student.college},
                                 class = #{student.classname},idCard = #{student.idCard},qq = #{student.qq},
                                 bank_card = #{student.bankCard},phone = #{student.phone},
                                 email = #{student.email},origin = #{student.origin}
                                 where student_id = #{student.id};
    </update>

    <select id="idCardHashMatch" resultType="int">
        select count(*) from studentbase where name = #{name} and idCard = #{idCard};
    </select>

    <select id="getStudentByColumn" resultMap="studentMap">
        select * from student where ${column} = #{value}
    </select>

    <delete id="delete">
        delete from student where student_id = #{studentId}
    </delete>

    <select id="getStudentListInAct" resultMap="studentMap">
        select * from student s,apply a,activity ac where s.student_id = a.student_id
          and a.activity_id = ac.activity_id and a.activity_id = #{activityId} limit #{begin},#{num}
    </select>

    <select id="listAll" resultMap="studentMap">
        select * from student limit #{begin},#{num}
    </select>

    <select id="getAllCnt" resultType="int">
        select count(*) from student
    </select>

    <select id="getCntInAct" resultType="int">
        select count(*) from student s,apply a,activity ac where s.student_id = a.student_id
                                                      and a.activity_id = ac.activity_id and a.activity_id = #{activityId}
    </select>

    <select id="searchByColumn" resultMap="studentMap">
        select * from student where ${column} like concat('%',concat(#{key},'%'))
    </select>

</mapper>